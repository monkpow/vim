*prototype* *proto* *proto.js*

*Object*, *object extensions*
extend(destination, source)
	 static  destination: any object, source: any object   Provides a way to implement inheritance by copying all properties and methods from source to destination.

inspect(targetObj)
	  static  targetObj: any object   Returns a human-readable string representation of targetObj. It defaults to the return value of toString if the given object does not define an inspect instance method.

keys(targetObj)
	 static  targetObj: any object   Returns an Array with the names of all the properties and methods of given object.

values(targetObj)
	 static  targetObj: any object   Returns a Array with the values of all the properties and methods of given object.

clone(targetObj)
	  static  targetObj: any object   Returns a shallow copy of targetObj.

*Number* *number extensions* 
Extensions for the Number class

toColorPart()
	 instance  (none)  Returns the hexadecimal representation of the number. Useful when converting the RGB components of a color into its HTML/CSS representation.

succ()
	  instance  (none)  Returns the next number. This function is used in scenarios that involve iterations.

times(iterator)
	 instance  iterator: a function object conforming to Function(index)   Calls the iterator function repeatedly passing the current index in the index argument.

The following sample will display alert message boxes from 0 to 9.

<script>
  function demoTimes(){
    var n = 10;
    n.times(function(index){
      alert(index);
    });
    /***************************
     * you could have also used: 
     *           (10).times( .... ); 
     ***************************/
  }

</script>

<input type="button" value="Test Number.times()" onclick="demoTimes()"/>
      
********************************************************************************
*Function* *function extentions* Extensions for the Function class
********************************************************************************
 
bind(object [, arg1 [, arg2 [...]]])
	  instance  object: the object that owns the method   Returns an instance of the function pre-bound to the function(=method) owner object. The returned function will use the same arguments as the original one (arg1, arg2, ... etc).

bindAsEventListener(object [, arg1 [, arg2 [...]]])
	   instance  object: the object that owns the method   Returns an instance of the function pre-bound to the function(=method) owner object. The returned function will have the current event object as its first argument followed optionally any other arguments passed after the object argument.

Let's see one of these extensions in action.

<input type="checkbox" id="myChk" value="1"/> Test?
<script>
  //declaring the class
  var CheckboxWatcher = Class.create();

  //defining the rest of the class implementation
  CheckboxWatcher.prototype = {

     initialize: function(chkBox, message) {
      this.chkBox = $(chkBox);
      this.message = message;
      //assigning our method to the event
      
      this.chkBox.onclick = 
         this.showMessage.bindAsEventListener(this, ' from checkbox');
      
     },

     showMessage: function(evt, extraInfo) {
      alert(this.message + ' (' + evt.type + ')' + extraInfo);
     }
  };


  var watcher = new CheckboxWatcher('myChk', 'Changed');
</script>

      
===============================================================================
*string extensions* Extensions for the String class
===============================================================================

camelize()
  instance  (none)  Converts a hyphen-delimited-string into a camelCaseString. This function is useful when writing code that deals with style properties, for example.

capitalize()
  instance  (none)  Converts the first character to upper case.

dasherize()
 instance  (none)  Replaces underscores '_' with dashes '-'.

escapeHTML()
  instance  (none)  Returns the string with any HTML markup characters properly escaped

evalScripts()
 instance  (none)  Evaluates each <script /> block found in the string.

extractScripts()
  instance  (none)  Returns an Array object containing all the <script /> blocks found in the string.

gsub(pattern, replacement)
  instance  pattern: string or regular expression being searched. replacement: simple string, template string, or Function(strings[]) to produce the replacements.  Returns a string that results from finding (or matching) the pattern string (or regular expression) in the current string and replacing it with the replacement string or the result of calling the replacement function passing an array with the strings that matched the pattern, including eventual regular expression groupings. When the replacement is a string, it can contain special templating tokens like #{n}, where n is the index of a grouping in the regular expession. #{0} will be replaced by the entire match, #{1} the first grouping, #{2} the second, and so on.

parseQuery()
  instance  (none)  Same as toQueryParams().

scan(pattern, replacement)
  instance  pattern: string or regular expression being searched. replacement: Function(strings[]) to iterate over the matches.   Provides a way to iterate over matched patterns in the string and operate on them. The pattern argument can be a string or a RegExp but a RegExp is evidently more useful. Similarly, the replacement argument can be a string or a function but it probably only makes sense to pass in a function to be able to produce anything useful.

strip()
 instance  (none)  Returns the string without any leading or trailing white spaces.

stripScripts()
  instance  (none)  Returns the string with any <script /> blocks removed

stripTags()
 instance  (none)  Returns the string with any HTML or XML tags removed

sub(pattern, replacement [, count])
 instance  pattern: string or regular expression being searched. replacement: string, or Function(strings[]) to produce the replacements. count: number or replacements to perform - defaults to 1.  Very similar to gsub but only performs a limited number of replacements, specified by the count parameter.

toArray()
 instance  (none)  Splits the string into an Array of its characters.

toQueryParams()
 instance  (none)  Splits a querystring into an associative Array indexed by parameter name (more like a hash).

truncate(length [, truncation])
 instance  length: maximum length of the resulting string. truncation: string used to replace the last characters of the resulting string - defaults to '...'  Used to produce a string of a known maximum length. In case the string needs to be truncated to maintain the maximum length, the text given in the truncation argument is used to replace the last few characters. (e.g.: var s='123456790'; alert(s.truncate(5)); //displays '12...' )

underscore()
  instance  (none)  Converts a CamelizedStringValue into a uderscore_formatted_string. (e.g.: var s='Namespace::MyClass123'; alert(s.underscore()); //displays 'namespace/my_class123' ). This function seems to be directly target at supporting Ruby on Rails functionality.

unescapeHTML()
  instance  (none)  The reverse of escapeHTML()

===============================================================================
Extensions for the Array class
===============================================================================

To start off, Array extends Enumerable, so all the handy methods defined in the Enumerable object are available. Besides that, the methods listed below are also implemented.
 

clear()
 instance  (none)  Empties the array and returns itself.

compact()
 instance  (none)  Returns the array without the elements that are null or undefined. This method does not change the array itself

first()
 instance  (none)  Returns the first element of the array.

flatten()
 instance  (none)  Returns a flat, one-dimensional version of the array. This flattening happens by finding each of the array's elements that are also arrays and including their elements in the returned array, recursively.

indexOf(value)
  instance  value: what you are looking for.  Returns the zero-based position of the given value if it is found in the array. Returns -1 if value is not found.

inspect()
 instance  (none)  Overridden to return a nicely formatted string representation of the array with its elements.

last()
  instance  (none)  Returns the last element of the array.

reverse([applyToSelf])
  instance  applyToSelf: indicates if the array itself should also be reversed.   Returns the array in reverse sequence. If no argument is given or if the argument is true the array itself will be changed. Otherwise it will remain unchanged.

shift()
 instance  (none)  Returns the first element and removes it from the array, reducing the array's length by 1.

without(value1 [, value2 [, .. valueN]])
  instance  value1 ... valueN: values to be excluded if present in the array.   Returns the array excluding the elements that are included in the list of arguments. This method does not change the array itself.

Let's see some of these methods in action.

<script>
var A = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
alert(A.inspect()); // "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']"
var B = A.without('e','f');
alert(B.inspect()); // "['a', 'b', 'c', 'd', 'g', 'h']"
alert(A.inspect()); // did not change A: "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']"
A.push(null);
A.push('x');
A.push(null);
A.push('y');
alert(A.inspect()); // "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', null, 'x', null, 'y']"
A = A.compact();
alert(A.inspect()); // "['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'x', 'y']"
var e = A.shift();
alert(e); // "a" 
alert(A.inspect()); // "['b', 'c', 'd', 'e', 'f', 'g', 'h', 'x', 'y']"
alert(A.indexOf('c')); // 1
alert(A.first()); // 'b'
alert(A.last()); // 'y'
A.clear();
alert(A.inspect()); // "[]"
A = ['a', 'b', 'c'];
B = A.reverse(false);
alert(B.inspect()); // "['c', 'b', 'a']"
alert(A.inspect()); // A left untouched: "['a', 'b', 'c']"
A.reverse(true);
alert(A.inspect()); // "['c', 'b', 'a']"  
A = ['a', 'b',  ['c1','c2','c3'] , 'd',  ['e1','e2']  ];
B = A.flatten();
alert(B.inspect()); // "['a','b','c1','c2','c3','d','e1','e2']"   
alert(A.inspect()); // unchanged: "['a','b',['c1','c2','c3'],'d',['e1','e2']]"    
</script>
      

===============================================================================
Extensions for the document DOM object
===============================================================================
 
getElementsByClassName(className [, parentElement]) instance  className: name of a CSS class associated with the elements, parentElement: object or id of the element that contains the elements being retrieved.   Returns all the elements that are associated with the given CSS class name. If no parentElement id given, the entire document body will be searched.

===============================================================================
Extensions for the Event object
===============================================================================
Property  Type  Description
KEY_BACKSPACE Number  8: Constant. Code for the Backspace key.
KEY_TAB Number  9: Constant. Code for the Tab key.
KEY_RETURN  Number  13: Constant. Code for the Return key.
KEY_ESC Number  27: Constant. Code for the Esc key.
KEY_LEFT  Number  37: Constant. Code for the Left arrow key.
KEY_UP  Number  38: Constant. Code for the Up arrow key.
KEY_RIGHT Number  39: Constant. Code for the Right arrow key.
KEY_DOWN  Number  40: Constant. Code for the Down arrow key.
KEY_DELETE  Number  46: Constant. Code for the Delete key.
observers:  Array   List of cached observers. Part of the internal implementation details of the object.
 

element(event)
  static  event: an Event object  Returns element that originated the event.

isLeftClick(event)
  static  event: an Event object  Returns true if the left mouse button was clicked.

pointerX(event)
 static  event: an Event object  Returns the x coordinate of the mouse pointer on the page.

pointerY(event)
 static  event: an Event object  Returns the y coordinate of the mouse pointer on the page.

stop(event)
 static  event: an Event object  Use this function to abort the default behavior of an event and to suspend its propagation.

findElement(event, tagName)
 static  event: an Event object, tagName: name of the desired tag.   Traverses the DOM tree upwards, searching for the first element with the given tag name, starting from the element that originated the event.

observe(element, name, observer, useCapture)
  static  element: object or id, name: event name (like 'click', 'load', etc), observer: function(evt) to handle the event, useCapture: if true, handles the event in the capture phase and if false in the bubbling phase.   Adds an event handler function to an event.

stopObserving(element, name, observer, useCapture)
  static  element: object or id, name: event name (like 'click'), observer: function that is handling the event, useCapture: if true handles the event in the capture phase and if false in the bubbling phase.   Removes an event handler from the event.

_observeAndCache(element, name, observer, useCapture)
 static      Private method, do not worry about it.

unloadCache()
 static  (none)  Private method, do not worry about it. Clears all cached observers from memory.

Let's see how to use this object to add an event handler to the load event of the window object.

<script>
  Event.observe(window, 'load', page_loaded, false);

  function page_loaded(evt) {
    Event.observe('parent_node', 'click', item_clicked, false);
  }
  
  function item_clicked(evt){
    var child = Event.element(evt);
    alert('The child node with id=' + child.id + ' was clicked');
    Event.stop(evt); //avoid another call related to 'parent_node' itself
  }
</script> 
...
<div id="parent_node">
  <div id="child1">First</div>
  <div id="child2">Second</div>
  <div id="child3">Third</div>
</div>    
      

===============================================================================
New objects and classes defined by prototype.js
===============================================================================

Another way the library helps you is by providing many objects that implement both support for object oriented designs and common functionality in general.

===============================================================================
The PeriodicalExecuter object
===============================================================================

This object provides the logic for calling a given function repeatedly, at a given interval, using a timer.
 

[ctor](callback, interval)
  constructor callback: a function that will be passed the PeriodcalExecuter object itself as the only argument, interval: number of seconds  Creates one instance of this object that will call the function repeatedly.

registerCallback()
  instance  (none)  Resets the timer.

stop()
  instance  (none)  Cancels the timer, avoiding the execution of the callback.

onTimerEvent()
  instance  (none)  This method is what will be called by the timer. It, in turn, will invoke the callback method passing the object itself.
Property  Type  Description

callback  Function(objExecuter)
 The function to be called. objExecuter: the PeriodcalExecuter making the call.
timer Timer   A handle to the underlying timer object responsible for repeatedly invoking the callback method
frequency Number  This is actually the interval in seconds
currentlyExecuting  Boolean Indicates if the callback is underway.

===============================================================================
The Prototype object

The Prototype object does not have any important role, other than declaring the version of the library being used.
Property  Type  Description
Version String  The version of the library
emptyFunction Function()  An empty function object
K Function(obj)   A function object that just echoes back the given parameter.
ScriptFragment  String  A regular expression to identify scripts

===============================================================================
The Enumerable object

The Enumerable object allows one to write more elegant code to iterate items in a list-like structure.

Many other objects extend the Enumerable object to leverage its useful interface.
 

each(iterator)
  instance  iterator: a function object conforming to Function(value, index)  Calls the given iterator function passing each element in the list in the first argument and the index of the element in the second argument

all([iterator])
 instance  iterator: a function object conforming to Function(value, index), optional.   This function is a way to test the entire collection of values using a given function. all will return true only if the iterator function returns a value that resolves to true for all the elements. It will return false otherwise. If no iterator is given, then the test will be if the element itself resolves to true. You can simply read it as "check if all elements pass the test."

any([iterator])
 instance  iterator: a function object conforming to Function(value, index), optional.   This function is a way to test the entire collection of values using a given function. any will return true if the iterator function returns a value that resolves to true for at least one of the elements. It will return false otherwise. If no iterator is given, then the test will be if the element itself resolves to true. You can simply read it as "check if any element passes the test."

collect(iterator)
 instance  iterator: a function object conforming to Function(value, index)  Calls the iterator function for each element in the collection and returns each result in an Array, one result element for each element in the collection, in the same sequence.

detect(iterator)
  instance  iterator: a function object conforming to Function(value, index)  Calls the iterator function for each element in the collection and returns the first element that caused the iterator function to return true (or, more precisely, not-false.) If no element returns true, then detect returns null.

entries()
 instance  (none)  Same as toArray().

find(iterator)
  instance  iterator: a function object conforming to Function(value, index)  Same as detect().

findAll(iterator)
 instance  iterator: a function object conforming to Function(value, index)  Calls the iterator function for each element in the collection and returns an Array with all the elements that caused the iterator function to return a value that resolves to true. This function is the opposite of reject().

grep(pattern [, iterator])
  instance  pattern: a RegExp object used to match the elements, iterator: a function object conforming to Function(value, index)   Tests the string value of each element in the collection against the pattern regular expression . The function will return an Array containing all the elements that matched the regular expression. If the iterator function is given, then the Array will contain the result of calling the iterator with each element that was a match.

include(obj)
  instance  obj: any object   Tries to find the given object in the collection. Returns true if the object is found, false otherwise.

inGroupsOf(number, fillWith)
  instance  number: number of items per group, fillWith: value used to fill empty spots   Returns the collection broken in groups containing as many items as specified by the first argument. If the quantity of items in the initial collection is not divisible by the number in the first argument, the resulting empty items at the end of the last group will be filled with null or with the value of the second argument, if provided. Quick example: ['a','b','c','d'].inGroupsOf(3,'?') creates [ ['a','b','c'] , ['d','?','?'] ]

inject(initialValue, iterator)
  instance  initialValue: any object to be used as the initial value, iterator: a function object conforming to Function(accumulator, value, index)   Combines all the elements of the collection using the iterator function. The iterator is called passing the result of the previous iteration in the accumulator argument. The first iteration gets initialValue in the accumulator argument. The last result is the final return value.

invoke(methodName [, arg1 [, arg2 [...]]])
  instance  methodName: name of the method that will be called in each element, arg1..argN: arguments that will be passed in the method invocation.   Calls the method specified by methodName in each element of the collection, passing any given arguments (arg1 to argN), and returns the results in an Array object.

map(iterator)
 instance  iterator: a function object conforming to Function(value, index)  Same as collect().

max([iterator])
 instance  iterator: a function object conforming to Function(value, index)  Returns the element with the greatest value in the collection or the greatest result of calling the iterator for each element in the collection, if an iterator is given.

member(obj)
 instance  obj: any object   Same as include().

min([iterator])
 instance  iterator: a function object conforming to Function(value, index)  Returns the element with the lowest value in the collection or the lowest result of calling the iterator for each element in the collection, if an iterator is given.

partition([iterator])
 instance  iterator: a function object conforming to Function(value, index)  Returns an Array containing two other arrays. The first array will contain all the elements that caused the iterator function to return true and the second array will contain the remaining elements. If the iterator is not given, then the first array will contain the elements that resolve to true and the other array will contain the remaining elements.

pluck(propertyName)
 instance  propertyName name of the property that will be read from each element. This can also contain the index of the element   Retrieves the value to the property specified by propertyName in each element of the collection and returns the results in an Array object.

reject(iterator)
  instance  iterator: a function object conforming to Function(value, index)  Calls the iterator function for each element in the collection and returns an Array with all the elements that caused the iterator function to return a value that resolves to false. This function is the opposite of findAll().

select(iterator)
  instance  iterator: a function object conforming to Function(value, index)  Same as findAll().

sortBy(iterator)
  instance  iterator: a function object conforming to Function(value, index)  Returns an Array with all the elements sorted according to the result the iterator function call.

toArray()
 instance  (none)  Returns an Array with all the elements of the collection.

zip(collection1[, collection2 [, ... collectionN [,transform]]])
  instance  collection1 .. collectionN: enumerations that will be merged, transform: a function object conforming to Function(value, index)   Merges each given collection with the current collection. The merge operation returns a new array with the same number of elements as the current collection and each element is an array (let's call them sub-arrays) of the elements with the same index from each of the merged collections. If the transform function is given, then each sub-array will be transformed by this function before being returned. Quick example: [1,2,3].zip([4,5,6], [7,8,9]).inspect() returns "[ [1,4,7],[2,5,8],[3,6,9] ]"

===============================================================================
The Hash object

The Hash object implements a hash structure, i.e. a collection of Key:Value pairs.

Each item in a Hash object is an array with two elements: first the key then the value. Each item also has two properties: key and value, which are pretty self-explanatory.
 

keys()
  instance  (none)  Returns an Array with the keys of all items.

values()
  instance  (none)  Returns an Array with the values of all items.

merge(otherHash)
  instance  otherHash: Hash object  Combines the hash with the other hash passed in and returns the new resulting hash.

toQueryString()
 instance  (none)  Returns all the items of the hash in a string formatted like a query string, e.g. 'key1=value1&key2=value2&key3=value3'

inspect()
 instance  (none)  Overridden to return a nicely formatted string representation of the hash with its key:value pairs.

===============================================================================
The ObjectRange class

Inherits from Enumerable

Represents a range of values, with upper and lower bounds.
Property  Type  Kind  Description
start (any) instance  The lower bound of the range
end (any) instance  The upper bound of the range
exclusive Boolean instance  Determines if the boundaries themselves are part of the range.
 
[ctor](start, end, exclusive) constructor start: the lower bound, end: the upper bound, exclusive: include the bounds in the range?   Creates one range object, spanning from start to end. It is important to note that start and end have to be objects of the same type and they must have a succ() method.
include(searchedValue)  instance  searchedValue: value that we are looking for  Checks if the given value is part of the range. Returns true or false.

===============================================================================
The Class object

The Class object is used when declaring the other classes in the library. Using this object when declaring a class causes the to new class to support an initialize() method, which serves as the constructor.

See the sample below.

//declaring the class
var MySampleClass = Class.create();

//defining the rest of the class implementation
MySampleClass.prototype = {

   initialize: function(message) {
    this.message = message;
   },

   showMessage: function(ajaxResponse) {
      alert(this.message);
   }
};  

//now, let's instantiate and use one object
var myTalker = new MySampleClass('hi there.');
myTalker.showMessage(); //displays alert

      

 
create(*) instance  (any)   Defines a constructor for a new class

===============================================================================
The Ajax object

This object serves as the root and namespace for many other classes that provide AJAX functionality.
Property  Type  Kind  Description
activeRequestCount  Number  instance  The number of AJAX requests in progress.
 
getTransport()  instance  (none)  Returns a new XMLHttpRequest object

===============================================================================
The Ajax.Responders object

Inherits from Enumerable

This object maintains a list of objects that will be called when Ajax-related events occur. You can use this object, for example, if you want to hook up a global exception handler for AJAX operations.
Property  Type  Kind  Description
responders  Array instance  The list of objects registered for AJAX events notifications.
 

register(responderToAdd)
  instance  responderToAdd: object with methods that will be called.  The object passed in the responderToAdd argument should contain methods named like the AJAX events (e.g. onCreate, onComplete, onException, etc.) When the corresponding event occurs all the registered objects that contain a method with the appropriate name will have that method called.

unregister(responderToRemove)
 instance  responderToRemove: object to be removed from the list.  The object passed in the responderToRemove argument will be removed from the list of registered objects.

dispatch(callback, request, transport, json)
  instance  callback: name of the AJAX event being reported, request: the Ajax.Request object responsible for the event, transport: the XMLHttpRequest object that carried (or is carrying) the AJAX call, json: the X-JSON header of the response (if present)   Runs through the list of registered objects looking for the ones that have the method determined in the callback argument. Then each of these methods is called passing the other 3 arguments. If the AJAX response contains a X-JSON HTTP header with some JSON content, then it will be evaluated and passed in the json argument. If the event is onException, the transport argument will have the exception instead and json will not be passed.

===============================================================================
The Ajax.Base class

This class is used as the base class for most of the other classes defined in the Ajax object.
 

setOptions(options)
 instance  options: AJAX options   Sets the desired options for the AJAX operation

responseIsSuccess()
 instance  (none)  Returns true if the AJAX operation succeeded, false otherwise

responseIsFailure()
 instance  (none)  The opposite of responseIsSuccess().

===============================================================================
The Ajax.Request class

Inherits from Ajax.Base

Encapsulates AJAX operations
Property  Type  Kind  Description
Events  Array static  List of possible events/statuses reported during an AJAX operation. The list contains: 'Uninitialized', 'Loading', 'Loaded', 'Interactive', and 'Complete.'
transport XMLHttpRequest  instance  The XMLHttpRequest object that carries the AJAX operation
url String  instance  The URL targeted by the request.
 

[ctor](url, options)
  constructor url: the url to be fetched, options: AJAX options   Creates one instance of this object that will call the given url using the given options. The onCreate event will be raised during the constructor call. Important: It is worth noting that the chosen url is subject to the browser's security settings. In many cases the browser will not fetch the url if it is not from the same host (domain) as the current page. You should ideally use only local urls to avoid having to configure or restrict the user's browser. (Thanks Clay).

evalJSON()
  instance  (none)  This method is typically not called externally. It is called internally to evaluate the content of an eventual X-JSON HTTP header present in the AJAX response.

evalResponse()
  instance  (none)  This method is typically not called externally. If the AJAX response has a Content-type header of text/javascript then the response body will be evaluated and this method will be used.

header(name)
  instance  name: HTTP header name  Retrieves the contents of any HTTP header of the AJAX response. Call this only after the AJAX call is completed.

onStateChange()
 instance  (none)  This method is typically not called externally. It is called by the object itself when the AJAX call status changes.

request(url)
  instance  url: url for the AJAX call  This method is typically not called externally. It is already called during the constructor call.

respondToReadyState(readyState)
 instance  readyState: state number (1 to 4)   This method is typically not called externally. It is called by the object itself when the AJAX call status changes.

setRequestHeaders()
 instance  (none)  This method is typically not called externally. It is called by the object itself to assemble the HTTP header that will be sent during the HTTP request.

===============================================================================
The options argument object

An important part of the AJAX operations is the options argument. There's no options class per se. Any object can be passed, as long as it has the expected properties. It is common to create anonymous objects just for the AJAX calls.
Property  Type  Default Description
method  String  'post'  Method of the HTTP request
parameters  String  ''  The url-formatted list of values passed to the request
asynchronous  Boolean true  Indicates if the AJAX call will be made asynchronously
postBody  String  undefined   Content passed to in the request's body in case of a HTTP POST
requestHeaders  Array undefined   List of HTTP headers to be passed with the request. This list must have an even number of items, any odd item is the name of a custom header, and the following even item is the string value of that header. Example:['my-header1', 'this is the value', 'my-other-header', 'another value']

onXXXXXXXX  Function(XMLHttpRequest, Object)
  undefined   Custom function to be called when the respective event/status is reached during the AJAX call. There are several alternatives for the "XXXXXXXX" in this option, among the alternatives are the statuses in Ajax.Request.Events, and the HTTP status codes. Example var myOpts = {on403: notAllowed, onComplete: showResponse, onLoaded: registerLoaded};. The function used will receive one argument, containing the XMLHttpRequest object that is carrying the AJAX operation and another argument containing the evaluated X-JSON response HTTP header.

onSuccess Function(XMLHttpRequest, Object)
  undefined   Custom function to be called when the AJAX call completes successfully. The function used will receive one argument, containing the XMLHttpRequest object that is carrying the AJAX operation and another argument containing the evaluated X-JSON response HTTP header.

onFailure Function(XMLHttpRequest, Object)
  undefined   Custom function to be called when the AJAX call completes with error. The function used will receive one argument, containing the XMLHttpRequest object that is carrying the AJAX operation and another argument containing the evaluated X-JSON response HTTP header.

onException Function(Ajax.Request, exception)
 undefined   Custom function to be called when an exceptional condition happens on the client side of the AJAX call, like an invalid response or invalid arguments. The function used will receive two arguments, containing the Ajax.Request object that wraps the AJAX operation and the exception object.
insertion an Insertion class  undefined   A class that will determine how the new content will be inserted. It can be Insertion.Before, Insertion.Top, Insertion.Bottom, or Insertion.After. Applies only to Ajax.Updater objects.
evalScripts Boolean undefined, false  Determines if script blocks will be evaluated when the response arrives. Applies only to Ajax.Updater objects.
decay Number  undefined, 1  Determines the progressive slowdown in a Ajax.PeriodicalUpdater object refresh rate when the received response is the same as the last one. For example, if you use 2, after one of the refreshes produces the same result as the previous one, the object will wait twice as much time for the next refresh. If it repeats again, the object will wait four times as much, and so on. Leave it undefined or use 1 to avoid the slowdown.

frequency Number  undefined, 2  Interval (not frequency)
 between refreshes, in seconds. Applies only to Ajax.PeriodicalUpdater objects.

===============================================================================
The Ajax.Updater class

Inherits from Ajax.Request

Used when the requested url returns HTML that you want to inject directly in a specific element of your page. You can also use this object when the url returns <script> blocks that will be evaluated upon arrival. Use the evalScripts option to work with scripts.
Property  Type  Kind  Description
containers  Object  instance  This object contains two properties: containers.success will be used when the AJAX call succeeds, and containers.failure will be used otherwise.
 
[ctor](container, url, options) constructor   container:this can be the id of an element, the element object itself, or an object with two properties - object.success element (or id) that will be used when the AJAX call succeeds, and object.failure element (or id) that will be used otherwise. url: the url to be fetched, options: AJAX options   Creates one instance of this object that will call the given url using the given options.
updateContent() instance  (none)  This method is typically not called externally. It is called by the object itself when the response is received. It will update the appropriate element with the HTML or call the function passed in the insertion option. The function will be called with two arguments, the element to be updated and the response text.

===============================================================================
The Ajax.PeriodicalUpdater class

Inherits from Ajax.Base

This class repeatedly instantiates and uses an Ajax.Updater object to refresh an element on the page, or to perform any of the other tasks the Ajax.Updater can perform. Check the Ajax.Updater reference for more information.
Property  Type  Kind  Description
container Object  instance  This value will be passed straight to the Ajax.Updater's constructor.
url String  instance  This value will be passed straight to the Ajax.Updater's constructor.

frequency Number  instance  Interval (not frequency)
 between refreshes, in seconds. Defaults to 2 seconds. This number will be multiplied by the current decay when invoking theAjax.Updater object
decay Number  instance  Keeps the current decay level applied when re-executing the task
updater Ajax.Updater  instance  The most recently used Ajax.Updater object
timer Object  instance  The handle to the timer being used to notify the object when it is time for the next refresh.
 

[ctor](container, url, options)
 constructor   container:this can be the id of an element, the element object itself, or an object with two properties - object.success element (or id) that will be used when the AJAX call succeeds, and object.failure element (or id) that will be used otherwise. url: the url to be fetched, options: AJAX options   Creates one instance of this object that will call the given url using the given options.

start()
 instance  (none)  This method is typically not called externally. It is called by the object itself to start performing its periodical tasks.

stop()
  instance  (none)  Causes the object to stop performing its periodical tasks. After stopping, the object will call the callback given in the onComplete option (if any.)

updateComplete()
  instance  (none)  This method is typically not called externally. It is called by the currently used Ajax.Updater after it completes the request. It is used to schedule the next refresh.

onTimerEvent()
  instance  (none)  This method is typically not called externally. It is called internally when it is time for the next update.

===============================================================================
The Element object

This object provides some utility functions for manipulating elements in the DOM.
 

addClassName(element, className)
  instance  element: element object or id, className: name of a CSS class   Adds the given class name to the element's class names.

classNames(element)
 instance  element: element object or id   Returns an Element.ClassNames object representing the CSS class names associated with the given element.

cleanWhitespace(element)
  instance  element: element object or id   Removes any white space text node children of the element

empty(element)
  instance  element: element object or id   Returns a Boolean value indicating if the element tag is empty (or has only whitespaces)

getDimensions(element)
  instance  element: element object or id   Returns the dimensions of the element. The returned value is an object with two properties: height and width.

getHeight(element)
  instance  element: element object or id   Returns the offsetHeight of the element

getStyle(element, cssProperty)
  instance  element: element object or id, cssProperty name of a CSS property (either format 'prop-name' or 'propName' works).  Returns the value of the CSS property in the given element or null if not present.

hasClassName(element, className)
  instance  element: element object or id, className: name of a CSS class   Returns true if the element has the given class name as one of its class names.

hide(element)
 instance  element: element object or id   Hides the element by setting its style.display to 'none'.

makeClipping(element)
 instance  element: element object or id   

makePositioned(element)
 instance  element: element object or id   Changes the element's style.position to 'relative'

remove(element)
 instance  element: element object or id   Removes the element from the document.

removeClassName(element, className)
 instance  element: element object or id, className: name of a CSS class   Removes the given class name from the element's class names.

scrollTo(element)
 instance  element: element object or id   Scrolls the window to the element position.

setStyle(element, cssPropertyHash)
  instance  element: element object or id, cssPropertyHash Hash object with the styles to be applied.   Sets the value of the CSS properties in the given element, according to the values in the cssPropertyHash argument.

show(element)
 instance  element: element object or id   Shows the element by resetting its style.display to ''.

toggle(element)
 instance  element: element object or id   Toggles the visibility of the element.

undoClipping(element)
 instance  element: element object or id   

undoPositioned(element)
 instance  element: element object or id   Clears the element's style.position to ''

update(element, html)
 instance  element: element object or id, html: html content   Replaces the inner html of the element with the given html argument. If the given html contains <script> blocks they will not be included but they will be evaluated.

visible(element)
  instance  element: element object or id   Returns a Boolean value indicating if the element is visible.

===============================================================================
The Element.ClassNames class

Inherits from Enumerable

Represents the collection of CSS class names associated with an element.
 
[ctor](element) constructor element: any DOM element object or id   Creates an Element.ClassNames object representing the CSS class names of the given element.
add(className)  instance  className: a CSS class name   Includes the given CSS class name in the list of class names associated with the element.
remove(className) instance  className: a CSS class name   Removes the given CSS class name from the list of class names associated with the element.
set(className)  instance  className: a CSS class name   Associates the element with the given CSS class name, removing any other class names from the element.

===============================================================================
The Abstract object

This object serves as the root for other classes in the library. It does not have any properties or methods. The classes defined in this object are also treated as traditional abstract classes.

===============================================================================
The Abstract.Insertion class

This class is used as the base class for the other classes that will provide dynamic content insertion. This class is used like an abstract class.
 
[ctor](element, content)  constructor   element: element object or id, content: HTML to be inserted   Creates an object that will help with dynamic content insertion.
contentFromAnonymousTable() instance  (none)  
Property  Type  Kind  Description
adjacency String  static, parameter   Parameter that specifies where the content will be placed relative to the given element. The possible values are: 'beforeBegin', 'afterBegin', 'beforeEnd', and 'afterEnd'.
element Object  instance  The element object that the insertion will be made relative to.
content String  instance  The HTML that will be inserted.

===============================================================================
The Insertion object

This object serves as the root for other classes in the library. It does not have any properties or methods. The classes defined in this object are also treated as traditional abstract classes.

===============================================================================
The Insertion.Before class

Inherits from Abstract.Insertion

Inserts HTML before an element.
 
[ctor](element, content)  constructor   element: element object or id, content: HTML to be inserted   Inherited from Abstract.Insertion. Creates an object that will help with dynamic content insertion.

The following code

<br/>Hello, <span id="person" style="color:red;">Wiggum. How's it going?</span>

<script> new Insertion.Before('person', 'Chief '); </script>
      

Will change the HTML to


<br/>Hello, Chief <span id="person" style="color:red;">Wiggum. How's it going?</span> 
      

===============================================================================
The Insertion.Top class

Inherits from Abstract.Insertion

Inserts HTML as the first child under an element. The content will be right after the opening tag of the element.
 
[ctor](element, content)  constructor   element: element object or id, content: HTML to be inserted   Inherited from Abstract.Insertion. Creates an object that will help with dynamic content insertion.

The following code

<br/>Hello, <span id="person" style="color:red;">Wiggum. How's it going?</span>

<script> new Insertion.Top('person', 'Mr. '); </script>
      

Will change the HTML to

<br/>Hello, <span id="person" style="color:red;">Mr. Wiggum. How's it going?</span> 
      

===============================================================================
The Insertion.Bottom class

Inherits from Abstract.Insertion

Inserts HTML as the last child under an element. The content will be right before the element's closing tag.
 
[ctor](element, content)  constructor   element: element object or id, content: HTML to be inserted   Inherited from Abstract.Insertion. Creates an object that will help with dynamic content insertion.

The following code

<br/>Hello, <span id="person" style="color:red;">Wiggum. How's it going?</span>

<script> new Insertion.Bottom('person', " What's up?"); </script>
      

Will change the HTML to

<br/>Hello, <span id="person" style="color:red;">Wiggum. How's it going? What's up?</span>  
      

===============================================================================
The Insertion.After class

Inherits from Abstract.Insertion

Inserts HTML right after the element's closing tag.
 
[ctor](element, content)  constructor   element: element object or id, content: HTML to be inserted   Inherited from Abstract.Insertion. Creates an object that will help with dynamic content insertion.

The following code

<br/>Hello, <span id="person" style="color:red;">Wiggum. How's it going?</span>

<script> new Insertion.After('person', ' Are you there?'); </script>
      

Will change the HTML to

<br/>Hello, <span id="person" style="color:red;">Wiggum. How's it going?</span> Are you there?  
      

===============================================================================
The Field object

This object provides some utility functions for working with input fields in forms.
 
clear(field1 [, field2 [, field3 [...]]]) instance  fieldN: field element object or id  Clears the value of each passed form field element.
present(field1 [, field2 [, field3 [...]]]) instance  fieldN: field element object or id  Returns true only if all forms fields contain non-empty values.
focus(field)  instance  field: field element object or id   Moves the input focus to the given form field.
select(field) instance  field: field element object or id   Selects the value in fields that support text selection
activate(field) instance  field: field element object or id   Move the focus and selects the value in fields that support text selection

===============================================================================
The Form object

This object provides some utility functions for working with data entry forms and their input fields.
 
serialize(form) instance  form: form element object or id   Returns a url-formatted list of field names and their values, like 'field1=value1&field2=value2&field3=value3'
findFirstElement(form)  instance  form: form element object or id   Returns the first enabled field element in the form.
getElements(form) instance  form: form element object or id   Returns an Array containing all the input fields in the form.
getInputs(form [, typeName [, name]]) instance  form: form element object or id, typeName: the type of the input element, name: the name of the input element.  Returns an Array containing all the <input> elements in the form. Optionally, the list can be filtered by the type or name attributes of the elements.
disable(form) instance  form: form element object or id   Disables all the input fields in the form.
enable(form)  instance  form: form element object or id   Enables all the input fields in the form.
focusFirstElement(form) instance  form: form element object or id   Activates the first visible, enabled input field in the form.
reset(form) instance  form: form element object or id   Resets the form. The same as calling the reset() method of the form object.

===============================================================================
The Form.Element object

This object provides some utility functions for working with form elements, visible or not.
 
serialize(element)  instance  element: element object or id   Returns the element's name=value pair, like 'elementName=elementValue'
getValue(element) instance  element: element object or id   Returns the value of the element.

===============================================================================
The Form.Element.Serializers object

This object provides some utility functions that are used internally in the library to assist extracting the current value of the form elements.
 
inputSelector(element)  instance  element: object or id of a form element that has the checked property, like a radio button or checkbox.   Returns an Array with the element's name and value, like ['elementName', 'elementValue']
textarea(element) instance  element: object or id of a form element that has the value property, like a textbox, button or password field.  Returns an Array with the element's name and value, like ['elementName', 'elementValue']
select(element) instance  element: object of a <select> element   Returns an Array with the element's name and all selected options' values or texts, like ['elementName', 'selOpt1 selOpt4 selOpt9']

===============================================================================
The Abstract.TimedObserver class

This class is used as the base class for the other classes that will monitor one element until its value (or whatever property the derived class defines) changes. This class is used like an abstract class.

Subclasses can be created to monitor things like the input value of an element, or one of the style properties, or number of rows in a table, or whatever else you may be interested in tracking changes to.
 
[ctor](element, frequency, callback)  constructor   element: element object or id, frequency: interval in seconds, callback: function to be called when the element changes   Creates an object that will monitor the element.
getValue()  instance, abstract  (none)  Derived classes have to implement this method to determine what is the current value being monitored in the element.
registerCallback()  instance  (none)  This method is typically not called externally. It is called by the object itself to start monitoring the element.
onTimerEvent()  instance  (none)  This method is typically not called externally. It is called by the object itself periodically to check the element.
Property  Type  Description
element Object  The element object that is being monitored.
frequency Number  This is actually the interval in seconds between checks.
callback  Function(Object, String)  The function to be called whenever the element changes. It will receive the element object and the new value.
lastValue String  The last value verified in the element.

===============================================================================
The Form.Element.Observer class

Inherits from Abstract.TimedObserver

Implementation of an Abstract.TimedObserver that monitors the value of form input elements. Use this class when you want to monitor an element that does not expose an event that reports the value changes. In that case you can use the Form.Element.EventObserver class instead.
 

[ctor](element, frequency, callback)
  constructor   element: element object or id, frequency: interval in seconds, callback: function to be called when the element changes   Inherited from Abstract.TimedObserver. Creates an object that will monitor the element's value property.

getValue()
  instance  (none)  Returns the element's value.

===============================================================================
The Form.Observer class

Inherits from Abstract.TimedObserver

Implementation of an Abstract.TimedObserver that monitors any changes to any data entry element's value in a form. Use this class when you want to monitor a form that contains a elements that do not expose an event that reports the value changes. In that case you can use the Form.EventObserver class instead.
 

[ctor](form, frequency, callback)
 constructor   form: form object or id, frequency: interval in seconds, callback function to be called when any data entry element in the form changes   Inherited from Abstract.TimedObserver. Creates an object that will monitor the form for changes.

getValue()
  instance  (none)  Returns the serialization of all form's data.

===============================================================================
The Abstract.EventObserver class

This class is used as the base class for the other classes that execute a callback function whenever a value-changing event happens for an element.

Multiple objects of type Abstract.EventObserver can be bound to the same element, without one wiping out the other. The callbacks will be executed in the order they are assigned to the element.

The triggering event is onclick for radio buttons and checkboxes, and onchange for textboxes in general and listboxes/dropdowns.
 

[ctor](element, callback)
 constructor   element: element object or id, callback: function to be called when the event happens   Creates an object that will monitor the element.

getValue()
  instance, abstract  (none)  Derived classes have to implement this method to determine what is the current value being monitored in the element.

registerCallback()
  instance  (none)  This method is typically not called externally. It is called by the object to bind itself to the element's event.

registerFormCallbacks()
 instance  (none)  This method is typically not called externally. It is called by the object to bind itself to the events of each data entry element in the form.

onElementEvent()
  instance  (none)  This method is typically not called externally. It will be bound to the element's event.
Property  Type  Description
element Object  The element object that is being monitored.

callback  Function(Object, String)
  The function to be called whenever the element changes. It will receive the element object and the new value.
lastValue String  The last value verified in the element.

===============================================================================
The Form.Element.EventObserver class

Inherits from Abstract.EventObserver

Implementation of an Abstract.EventObserver that executes a callback function to the appropriate event of the form data entry element to detect value changes in the element. If the element does not expose any event that reports changes, then you can use the Form.Element.Observer class instead.

[ctor](element, callback)
 constructor   element: element object or id, callback: function to be called when the event happens   Inherited from Abstract.EventObserver. Creates an object that will monitor the element's value property.

getValue()
  instance  (none)  Returns the element's value

===============================================================================
The Form.EventObserver class

Inherits from Abstract.EventObserver

Implementation of an Abstract.EventObserver that monitors any changes to any data entry element contained in a form, using the elements' events to detect when the value changes. If the form contains elements that do not expose any event that reports changes, then you can use the Form.Observer class instead.
 
[ctor](form, callback)
  constructor   form: form object or id, callback: function to be called when any data entry element in the form changes  Inherited from Abstract.EventObserver. Creates an object that will monitor the form for changes.

getValue()
  instance  (none)  Returns the serialization of all form's data.

===============================================================================

The Position object (preliminary documentation)

This object provides a host of functions that help when working with element positioning.

prepare()
 instance  (none)  Adjusts the deltaX and deltaY properties to accommodate changes in the scroll position. Remember to call this method before any calls to withinIncludingScrolloffset after the page scrolls.

realOffset(element)
 instance  element: object   Returns an Array with the correct scroll offsets of the element, including any scroll offsets that affect the element. The resulting array is similar to [total_scroll_left, total_scroll_top]

cumulativeOffset(element)
 instance  element: object   Returns an Array with the correct positioning offsets of the element, including any offsets that are imposed by positioned parent elements. The resulting array is similar to [total_offset_left, total_offset_top]

within(element, x, y)
 instance  element: object, x and y: coordinates of a point  Tests if the given point coordinates are inside the bounding rectangle of the given element

withinIncludingScrolloffsets(element, x, y)
 instance  element: object, x and y: coordinates of a point   

overlap(mode, element)
  instance  mode: 'vertical' or 'horizontal', element: object   within() needs to be called right before calling this method. This method will return a decimal number between 0.0 and 1.0 representing the fraction of the coordinate that overlaps on the element. As an example, if the element is a square DIV with a 100px side and positioned at (300, 300), then within(divSquare, 330, 330); overlap('vertical', divSquare); should return 0.70, meaning that the point is at the 70% (100px - 30px = 70px) mark from the bottom border of the DIV. The easiest way to understand it is to think of the given coordinate pair as the top-left corner of another rectangle, overlapping the first one. The number will be the percentage of the width or height that is overlapped (assuming that the second rectangle is large enough.)

clone(source, target)
 instance  source: element object or id, target: element object or id  Resizes and repositions the target element identically to the source element.
